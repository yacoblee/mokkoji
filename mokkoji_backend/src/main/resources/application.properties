spring.application.name=mokkoji_backend
server.port=8080

#JSP 설정
#=> 폴더는 생성해야함: webapp/WEB-INF/views/
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
server.servlet.jsp.init-parameters.development=true
# Controller에서 리턴될 String Type_viewName 의 prefix, suffix를 지정해 줘야 하며
# jsp 수정시 재실행없이 바로 반영되도록 development를 true로 선언함.

# Logging Setting
# => INFO, DEBUG, TRACE 변경 Test 
# => 전체 로그레벨 설정 (필요시에만 사용)
#logging.level.root=info
# => com.example.demo 패키지 이하 로그레벨 설정
logging.level.com.example.demo=info

#DBConnection: DataSource 설정
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/project?useUnicode=true&characterEncoding=utf8&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.datasource.username=root

#spring.datasource.password=mysql


spring.datasource.password=mysql
 

#Multipart uploadSize 설정
#spring.servlet.multipart.max-file-size=100MB
# => 요청 받을 수 있는 파일의 최대 사이즈
#spring.servlet.multipart.max-request-size=100MB
# => 요청 받을 수 있는 데이터 전체의 최대 사이즈

# ** Hibernate 설정
#spring.jpa.hibernate.ddl-auto=update
# => 프로젝트 실행시 자동 DDL 생성할것인지 결정여부
#	- create: 매번 Table을 새로 생성
#	- update: 존재하지 않으면 Create, 변경 사항이 있으면 Alter로 자동변경
#	- create-drop: 프로그램 시작시 create 하고 종료 시 drop
#	- validate: 테이블 내용이 변경되면 변경 내용을 출력하고 프로그램 종료  
# => 팀 프로젝트 개발환경 에서는 
# 	- 다양한 제약 조건들을 사용하게 되고, DDL은 직접 관리하는것이 바람직함 
#	- JPA 가 자동으로 제어하게되면 의도하지 않은 변경이 발생하게되어 관리가 어려움.

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
# => hibernate 가 만드는 SQL구문을 콘솔에 formatting(가독성좋게 줄바꿈)하여 보여줌

# Logging Setting : QueryDSL 적용시 추가함
logging.level.org.hibernate=info

