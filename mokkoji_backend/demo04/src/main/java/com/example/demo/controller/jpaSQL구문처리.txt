** JPA 쿼리의 특징
=> 테이블이 아닌 엔티티 객체를 대상으로 처리함.

** JPA의 다양한 쿼리 방법
	1) JPARepository Method 규약
	2) @Query : JPQL, Native_SQL
	3) JPA Criteria
	4) QueryDSL
	5) Repository intreface 직접 작성 & EntityManager 사용하기	
	    => MyRepository, MyRepositoryImpl 참고 
	6) JDBC API 직접 사용, MyBatis, SpringJdbcTemplate 함께 사용

** JPA Repository에 쿼리 메서드 추가하기
 ( https://blog.naver.com/mion0602/223183393956 : Method 규약 )

1) JPARepository Method 규약 이용하기
=> findBy + 검색칼럼 (첫문자는 반드시 대문자로)
  Optional<CalCategory> findByCtgrIdAndCtgrSeqn(String id, Long seqn);
  -> select * from categoryinfo where ctgrId = id and ctgrSeqn = seqn 라는 쿼리 자동생성됨.
  List<Member> findbySearchId(String keyword);	
  -> List 형식 return 의 경우에도 findby~~~	

=> 가능하면 @Query("...") 보다는 Method 규약을 이용하는것이 작업량을 줄일수 있으므로 권장됨.
  ( JPA자체가 반복적인 작업량을 줄이기 위해 나온 것이니 만큼... ) 
=> 다양한 사용예시 https://blog.naver.com/mion0602/223183393956
  ( count함수, LIKE 등... ) 

2) @Query 를 이용한 직접쿼리 선언
=> @Query("...")
=> Spring Data JPA에서 JPQL 또는 네이티브 SQL쿼리를 사용할 수 있도록 지원하는 @
=> @Query는 JPQL(Java Persistence Query Language) 을 기본으로 사용하며
   Native_SQL 사용시에는 nativeQuery 속성을 true로 설정 	

2.1) JPQL(Java Persistence Query Language)
=> 객체 지향 쿼리 언어
=> Table 명은 Entity명 사용함. (별칭은 필수 select m from Member as m) 
=> SQL과 대부분의 문법이 유사함. (SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원)
=> DML 은 Update, Delete 만 지원 (Insert 지원하지않음)
=> 엔티티와 속성은 대소문자 구분함 (Member와 member 다르고, username과 USERNAME 다름)
   SELECT, FROM 같은 JPQL 키워드는 대소문자를 구분하지 않음.

=> 그러나 특정 데이터베이스에 종속적인 기능은 지원하지 않음 
  ( Ex.	- 특정 DB만 지원하는 함수, 문법, SQL 쿼리 힌트
		- 인라인 뷰, UNION, INTERSECT, 스토어드 프로시저)
		- 다양한 이유로 JPQL을 사용할 수 없을 때, Native_SQL을 통해 SQL 직접 사용가능. )
=> JPQL 의 select 의 return Type은 List<Object[]> 이며,
   DTO 로 return 을 받을 수 있음 (장점)
   단, 이를 위해 select new ~~~ 를 사용함.

2.2) Native_SQL 및 
=> DB 테이블을 대상으로함 (Table명 사용함) 
=> DB 의 SQL 구문 그대로 사용가능 (편리)
   @Query의 nativeQuery 속성을 true로 설정, value 속성에 SQL구문 작성 
   -> 예)	
	@Query(value = "SELECT * FROM USERS u WHERE u.status = 1"
		   , nativeQuery = true)
	List<User> findAllActiveUsersNative();
=>  DTO 로 return 을 받을 수 있음 (단점)  

2.3) 공통사항
=> 파라미터는 @Param("파라미터명")String id 로 선언후 "=:파라미터명" 으로 사용
=> DML 사용시에는 @Modifying, @Transactional 반드시 사용.

=> https://blog.naver.com/emblim98/223222404308 참고

3) EntityManager 사용 과 Repository 직접생성하기
=> JPQL을 사용하는 다른 방법 (https://kth990303.tistory.com/70)
=> MyRepository, MyRepositoryImpl

4) JPA Criteria Query(객체지향 쿼리 빌더)
=> JPQL Query Builder Class
=> JPQL을 자바 코드로 작성하도록 도와주는 빌더 클래스 API
      자바코드로 JPQL을 작성할 수 있도록 도와주는 JPQL의 빌더 역할이라고 보면됨.
=> 장점
    - 복잡한 쿼리를 자바코드를 이용하여 작성하므로 오타가 나면 컴파일 오류가 난다.
    - 동적 쿼리를 생성하는 데 유용.
=> 단점
    - 복잡하고 장황한 코드를 만들 수 있어서 이해 및 유지보수에 어려움.
      (본인의 코드도 나중에 다시 보면 이해하기 힘들다.)      
=> 그러므로 QueryDSL 사용을 권장.
 
5) QueryDSL
=> Querydsl - 레퍼런스 문서
   http://querydsl.com/static/querydsl/4.0.1/reference/ko-KR/html_single/
=> QueryDSL사용법.txt 메모장 참고

=> 문자가 아닌 자바코드로 쿼리를 작성함으로 컴파일 시점에 오류를 찾을수 있다.
=> IDE의 자동완성 도움을 받을 수 있음.
=> 동적 쿼리를 작성하기 편리하다.
=> 쿼리 작성시 제약조건 등을 메서드추출을 통해 재사용할 수 있다.
=> 결론
   JPQL에 비하여 풍부한 체이닝메서드 및 유틸리티 메서드 와 Q클래스를 기반으로 직관적으로 쿼리를 작성함.

=> 실행방법
	- 프로젝트 내의 @Entity 어노테이션을 선언한 클래스를 탐색하고, 
	  JPAAnnotationProcessor를 사용해 Q 클래스를 생성.
	 ( pom.xml 의 설정을 통해 자동 생성됨 )   	
	- Q클래스 파일에 접근 해서 DB 작업
 	- QueryDSL로 쿼리를 작성할때 Q클래스를 사용함으로써쿼리를 Type-Safe하게 작성할 수 있음.

=> 실습순서 (QueryDSL사용법.txt 메모장 참고)
	- pom.xml : dependency, plugin 추가
	- 이후, application.properties 에 아래설정 추가
		# Logging Setting
		  logging.level.org.hibernate=info 
	- Project 우클릭 -> Maven - Update project...
	- target/generated-sources/java/entity 패키지에 Q클래스 생성됨
	- Q 클래스를 사용하여 Type-Safe하게 쿼리작성 가능
	  ( MemberDSLRepository, MemberDSLRepositoryImpl 참고 )
	- 단, 이때 사용하는 JPAQueryFactory 생성을 위한 설정을 DemoConfig 에 추가함.

 => 적용 MemberDSLRepository.java

6) JDBC API 직접 사용
=> JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, Mybatis 등 함께 사용 가능하다.
=> 단, 영속성 컨텍스트를 적절한 시점에 강제로 플러시 필요하다. 
   즉, JPA에서 지원하는 기본 쿼리문들은 모두 flush()처리를 해주지만, 
   JDBC를 직접사용하는 경우에는 직접 flush() 를 해야함.

** JPA 복합키실습 (@IdClass 방법) 과 count 값 수정하기 
=> TestkeyRepository, 

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** JPQL 의 Fetch Join **
=> JPQL에서 성능 최적화를 위해 제공하는 기능이다.
=> 연관된 엔티티나 컬렉션을 SQL한번에 함께 조회 가능하며
   일반 Join 구문이 2단계로 처리되는것에 비하여 한번에 로딩함. 
=> Fetch Join 은 지연로딩을 피하고 N+1문제를 해결 (member 의 갯수 만큼 호출)
   ( 지연로딩과 N+1문제 : https://jie0025.tistory.com/518 참고 )
=> JPQL 예시
   [ LEFT [OUTER] | INNER ] JOIN FETCH 조인경로
	 select m from Member m join fetch m.jno
=> SQL 과 비교
	SELECT m.*, j.* FROM member m INNER JOIN jo j ON m.jno=j.jno

=> Fetch Join 의 한계
	- 별칭(alias)을 줄 수 없다.
	  하이버네이트에서는 가능하지만 사용하지 않는것을 권장
	  join fetch를 연달아 반복 사용하는 극히 일부 상황에서만 사용하기도 하지만 가급적 권장하지 않음.
	  (차라리 별도의 쿼리를 다시 날리는 것을 권장한다.)	
	- 둘 이상의 컬렉션은 패치 조인 할 수 없다.
	- 컬렉션을 페치조인 할 경우, 페이징 API(setFirstResult, setMaxResults)를 사용할 수 없다. 
	- 조인결과가 엔티티 와는 다른 결과를 내야 한다면, 페치조인 보다는 일반조인을 사용하고 별도의 DTO를 사용하는것이 효과적.

 => fetchJoin() : MemberDSLRepositoryImpl.java, findMemberJoinDSL() 참고

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* ** Spring Security 인증기능 추가

 ** @EntityGraph
 => 1:N 또는  N:1 등 서로 연관된 엔티티들을 SQL한번으로 조회하는 방법
     즉, JPA가 제공하는 Fetch Join의 간편한 @ 버전으로
     N+1 문제를 해결하고, 성능 최적화에 도움을 줄수있음. 
	-> JPQL 없이 Fetch Join을 수행할수 있음
	-> LEFT OUTER JOIN 만 지원 (다른방식이 필요하면 JPQL Fetch_Join 사용) 
	-> JPQL + @EntityGraph도 가능
 => https://hstory0208.tistory.com/entry/Spring-Data-JPA-EntityGraph-엔티티-그래프란 	
	
 => Member → MemberRole 은 지연로딩 관계(FetchType.LAZY)이므로, 
     Member의 데이터를 조회(1)할 때마다 MemberRole 조회(N) 쿼리가 실행됨
     이렇게 연관된 엔티티를 한번에 조회하는 할수있도록 해주는 구문이 Fetch Join이고,
     이를 간편하게 지원해주는것이 @EntityGraph 임.

 => Fetch Join  예시
    @Query("select m from Member m left join fetch m.team")
    List<Member> findMemberFetchJoin();

 ** JPA 지연로딩 과 즉시로딩 (FetchType.LAZY or EAGER)
 => 지연 로딩 (LAZY)
	JPA(하이버네이트)는 성능 최적화를 위해, 연관된 엔티티는 가짜객체 (프록시,Proxy)로 만들어
	실제 엔티티 객체 생성을 지연시키는 전략을 구사하는데  
	이를 지연로딩(Lazy Loading)이라함. 
	그리고 이 엔티티는 필요시점에는 실제 쿼리를 실행시켜줌.
	( 예를 들면 getMemberRoleList() 호출시 )

 => 즉시 로딩 (EAGER: 열렬한, 간절히 바라는, 열심인(=keen))
	-> fetch 타입을 EAGER로 설정
	-> 대부분의 JPA 구현체는 가능하면 조인을 사용해서 SQL한번에 모두 조회하려고 한다.
	    이렇게 하면, 실제 조회할때 한번의 쿼리로 다 조회해온다.
	    이때 실행결과를 보면 연관된 객체결과도 프록시객체가 아니라 실제객체이다.

 ** 지연로딩 과 즉시로딩 주의할 점
 => 실무에서는 대부분 지연로딩만 사용
 => 즉시로딩을 사용하면  N+1 문제 발생
	JPA 구현체도 한번에 가저오려고 하고, 한번에 가져와서 사용하는것이 좋아보이지만,
	즉시로딩을 적용하면 예상치 못한 SQL이 다량 발생한다.
	예를 들면 @ManyToOne이 5개 있는데 전부 EAGER로 설정되어 있다면, 
	Join 이 5개 일어나게된다. (실무에선 테이블이 더 많다.)
	
	이렇게 쿼리를 1개 날렸는데, 그것 때문에 추가 쿼리가 N개 나가게 되는것을 N+1 문제라 하며
	즉시로딩은 JPQL에서 N+1 문제를 일으킨다.
*/	

